// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Infra.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Infra;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for UpdatesOperations.
    /// </summary>
    public static partial class UpdatesOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static string GetSummary(this IUpdatesOperations operations, string region)
            {
                return operations.GetSummaryAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSummaryAsync(this IUpdatesOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSummaryWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static string Get(this IUpdatesOperations operations, string region)
            {
                return operations.GetAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetAsync(this IUpdatesOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='vupdate'>
            /// Th name of the farm.
            /// </param>
            public static string GetRun(this IUpdatesOperations operations, string region, string vupdate)
            {
                return operations.GetRunAsync(region, vupdate).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='vupdate'>
            /// Th name of the farm.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetRunAsync(this IUpdatesOperations operations, string region, string vupdate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRunWithHttpMessagesAsync(region, vupdate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='vupdate'>
            /// Th name of the farm.
            /// </param>
            /// <param name='updateParameter'>
            /// </param>
            public static string UpdateMethod(this IUpdatesOperations operations, string region, string vupdate, UpdateProperties updateParameter)
            {
                return operations.UpdateMethodAsync(region, vupdate, updateParameter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='vupdate'>
            /// Th name of the farm.
            /// </param>
            /// <param name='updateParameter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> UpdateMethodAsync(this IUpdatesOperations operations, string region, string vupdate, UpdateProperties updateParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMethodWithHttpMessagesAsync(region, vupdate, updateParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
