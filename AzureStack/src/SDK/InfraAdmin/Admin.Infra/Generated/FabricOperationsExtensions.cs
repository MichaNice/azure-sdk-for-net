// Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.AzureStack.Infra.Admin
{
    using Microsoft.AzureStack;
    using Microsoft.AzureStack.Infra;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for FabricOperations.
    /// </summary>
    public static partial class FabricOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static IPage<InfraRole> ListInfraRoles(this IFabricOperations operations, string region)
            {
                return operations.ListInfraRolesAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InfraRole>> ListInfraRolesAsync(this IFabricOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInfraRolesWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static string GetInfraRoleInstance(this IFabricOperations operations, string region)
            {
                return operations.GetInfraRoleInstanceAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetInfraRoleInstanceAsync(this IFabricOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInfraRoleInstanceWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static string GetScaleUnit(this IFabricOperations operations, string region)
            {
                return operations.GetScaleUnitAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetScaleUnitAsync(this IFabricOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScaleUnitWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static string GetScaleUnitNode(this IFabricOperations operations, string region)
            {
                return operations.GetScaleUnitNodeAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetScaleUnitNodeAsync(this IFabricOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetScaleUnitNodeWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static string GetStorageCapacity(this IFabricOperations operations, string region)
            {
                return operations.GetStorageCapacityAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetStorageCapacityAsync(this IFabricOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageCapacityWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            public static string GetStorageShare(this IFabricOperations operations, string region)
            {
                return operations.GetStorageShareAsync(region).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='region'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetStorageShareAsync(this IFabricOperations operations, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStorageShareWithHttpMessagesAsync(region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<InfraRole> ListInfraRolesNext(this IFabricOperations operations, string nextPageLink)
            {
                return operations.ListInfraRolesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<InfraRole>> ListInfraRolesNextAsync(this IFabricOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInfraRolesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
